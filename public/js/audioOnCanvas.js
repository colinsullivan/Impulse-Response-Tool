// Generated by CoffeeScript 1.3.1
(function() {
  var audioOnCanvas;

  audioOnCanvas = (typeof exports !== "undefined" && exports !== null) && this || (this.audioOnCanvas = {});

  /*
  #   @class  Used for generating a waveform inside a canvas
  #           element.
  */


  audioOnCanvas.WaveformRenderer = (function() {

    WaveformRenderer.name = 'WaveformRenderer';

    /*
      # @constructor
      #
      # @param  canvasElement   The canvas element to draw the waveform on.
      # @param  buffer          The `AudioBuffer` instance to render.
    */


    function WaveformRenderer(options) {
      if (options == null) {
        options = {};
      }
      this.canvasElement = options.canvasElement;
      this.buffer = options.buffer;
      if (!(this.canvasElement != null)) {
        throw new Error("this.canvasElement is undefined");
      }
      if (!(this.buffer != null)) {
        throw new Error("this.buffer is undefined");
      }
      this.canvasCtx = this.canvasElement.getContext("2d");
      this.render();
    }

    WaveformRenderer.prototype.render = function() {
      var canvasHeight, canvasWidth, drawSample, midHeight, prevSamplePosition, samples, x, _i, _results,
        _this = this;
      canvasHeight = this.canvasCtx.canvas.clientHeight;
      canvasWidth = this.canvasCtx.canvas.clientWidth;
      midHeight = canvasHeight / 2.0;
      prevSamplePosition = {
        x: 0,
        y: midHeight
      };
      samples = this.buffer.getChannelData(0);
      drawSample = function(x) {
        var newSamplePosition, sampleValue;
        sampleValue = samples[Math.floor((x / canvasWidth) * samples.length)];
        newSamplePosition = {
          x: x,
          y: midHeight - midHeight * sampleValue
        };
        _this.canvasCtx.beginPath();
        _this.canvasCtx.moveTo(prevSamplePosition.x, prevSamplePosition.y);
        _this.canvasCtx.lineTo(newSamplePosition.x, newSamplePosition.y);
        _this.canvasCtx.stroke();
        prevSamplePosition.x = newSamplePosition.x;
        return prevSamplePosition.y = newSamplePosition.y;
      };
      _results = [];
      for (x = _i = 0; 0 <= canvasWidth ? _i <= canvasWidth : _i >= canvasWidth; x = _i += 0.01) {
        _results.push(drawSample(x));
      }
      return _results;
    };

    return WaveformRenderer;

  })();

}).call(this);
